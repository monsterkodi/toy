// koffee 1.7.0

/*
000   000  000  000   000  0000000     0000000   000   000
000 0 000  000  0000  000  000   000  000   000  000 0 000
000000000  000  000 0 000  000   000  000   000  000000000
000   000  000  000  0000  000   000  000   000  000   000
00     00  000  000   000  0000000     0000000   00     00
 */
var $, MainWin, Toy, keyinfo, ref, win,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), $ = ref.$, keyinfo = ref.keyinfo, win = ref.win;

Toy = require('./toy');

MainWin = (function(superClass) {
    extend(MainWin, superClass);

    function MainWin() {
        this.onMenuAction = bind(this.onMenuAction, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.onKeyUp = bind(this.onKeyUp, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onLoad = bind(this.onLoad, this);
        this.last = {
            left: {
                x: 0,
                y: 0
            },
            right: {
                x: 0,
                y: 0
            }
        };
        this.inhibit = {
            left: 0,
            right: 0
        };
        MainWin.__super__.constructor.call(this, {
            dir: __dirname,
            pkg: require('../package.json'),
            menu: '../coffee/menu.noon',
            icon: '../img/mini.png',
            prefsSeperator: 'â–¸',
            context: false,
            onLoad: this.onLoad
        });
        this.mouse = {
            down: [0, 0],
            up: [0, 0]
        };
        addEventListener('pointerdown', this.onMouseDown);
        addEventListener('pointermove', this.onMouseMove);
        addEventListener('pointerup', this.onMouseUp);
    }

    MainWin.prototype.onLoad = function() {
        this.toy = new Toy($('#toy'));
        return this.win.on('resize', this.toy.resize);
    };

    MainWin.prototype.onKeyDown = function(event) {
        var char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        if (event.which < 256 && !event.repeat) {
            this.toy.mEffect.setKeyDown(event.which);
        }
        return MainWin.__super__.onKeyDown.apply(this, arguments);
    };

    MainWin.prototype.onKeyUp = function(event) {
        var char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        if (event.which < 256 && !event.repeat) {
            this.toy.mEffect.setKeyUp(event.which);
        }
        return MainWin.__super__.onKeyUp.apply(this, arguments);
    };

    MainWin.prototype.mousePos = function(event) {
        var br;
        br = $('#toy').getBoundingClientRect();
        return [event.clientX - br.left, event.clientY - br.top];
    };

    MainWin.prototype.onMouseDown = function(event) {
        this.mouse.down = this.mousePos(event);
        return this.mouseEvent(event);
    };

    MainWin.prototype.onMouseMove = function(event) {
        return this.mouseEvent(event);
    };

    MainWin.prototype.onMouseUp = function(event) {
        this.mouse.up = this.mousePos(event);
        return this.mouseEvent(event);
    };

    MainWin.prototype.mouseEvent = function(event) {
        var dpr, hgt, pos;
        if (!this.toy) {
            return;
        }
        pos = this.mousePos(event);
        hgt = this.toy.mCanvas.height;
        dpr = window.devicePixelRatio;
        if (event.buttons) {
            return this.toy.mEffect.mRenderer.iMouse = [pos[0] * dpr, hgt - pos[1] * dpr, this.mouse.down[0] * dpr, hgt - this.mouse.down[1] * dpr];
        } else {
            return this.toy.mEffect.mRenderer.iMouse = [this.mouse.up[0] * dpr, hgt - this.mouse.up[1] * dpr, -this.mouse.down[0] * dpr, -hgt + this.mouse.down[1] * dpr];
        }
    };

    MainWin.prototype.onMenuAction = function(action, args) {
        return MainWin.__super__.onMenuAction.apply(this, arguments);
    };

    return MainWin;

})(win);

new MainWin;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/window.coffee