// koffee 1.6.0

/*
000000000   0000000   000   000  
   000     000   000   000 000   
   000     000   000    00000    
   000     000   000     000     
   000      0000000      000
 */
var Effect, Renderer, Toy, empty, ref, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), empty = ref.empty, slash = ref.slash;

Renderer = require('./renderer');

Effect = require('./effect');

Toy = (function() {
    Toy.instance = null;

    function Toy(mCanvas) {
        var devicePixelRatio;
        this.mCanvas = mCanvas;
        this.resize = bind(this.resize, this);
        this.renderLoop = bind(this.renderLoop, this);
        this.mCreated = false;
        this.mGLContext = null;
        this.mEffect = null;
        this.mStartTime = null;
        this.mIsPaused = false;
        this.mForceFrame = false;
        this.mPass = [];
        this.fpsCache = [];
        this.mActiveDoc = 0;
        devicePixelRatio = window.devicePixelRatio || 1;
        this.mCanvas.width = this.mCanvas.offsetWidth * devicePixelRatio;
        this.mCanvas.height = this.mCanvas.offsetHeight * devicePixelRatio;
        this.mStartTime = performance.now();
        this.mFrameTime = 0;
        this.mIsRendering = false;
        this.mGLContext = Renderer.createGlContext(this.mCanvas);
        if (!this.mGLContext) {
            console.error('no gl context');
        }
        this.mErrors = new Array();
        this.mEffect = new Effect(this.mGLContext, this.mCanvas.width, this.mCanvas.height);
        if (!this.mEffect.mCreated) {
            console.error('no effect');
            return;
        }
        this.mCanvas.addEventListener('webglcontextlost', function(event) {
            console.error('webgl context lost');
            return event.preventDefault();
        });
        this.load('knighty');
    }

    Toy.prototype.startRendering = function() {
        this.mIsRendering = true;
        return this.renderLoop();
    };

    Toy.prototype.renderLoop = function() {
        var deltaTime, fps, relTime, time;
        if (!this.mGLContext) {
            return;
        }
        requestAnimationFrame(this.renderLoop);
        if (this.mIsPaused && !this.mForceFrame) {
            return;
        }
        this.mForceFrame = false;
        time = performance.now();
        relTime = 0.0;
        deltaTime = 0.0;
        if (this.mIsPaused) {
            relTime = this.mFrameTime;
            deltaTime = 1000.0 / 60.0;
        } else {
            relTime = time - this.mStartTime;
            deltaTime = relTime - this.mFrameTime;
            this.mFrameTime = relTime;
        }
        this.fpsCache.push(1000.0 / deltaTime);
        if (this.fpsCache.length > 60) {
            this.fpsCache.shift();
        }
        fps = 0;
        this.fpsCache.map(function(f) {
            return fps += f;
        });
        fps /= this.fpsCache.length;
        return this.mEffect.paint(relTime / 1000.0, deltaTime / 1000.0, fps, this.mIsPaused);
    };

    Toy.prototype.resize = function() {
        var dpr;
        if (this.mCanvas) {
            dpr = window.devicePixelRatio;
            this.mCanvas.width = this.mCanvas.offsetWidth * dpr;
            this.mCanvas.height = this.mCanvas.offsetHeight * dpr;
            this.mEffect.setSize(this.mCanvas.width, this.mCanvas.height);
            return this.mForceFrame = true;
        }
    };

    Toy.prototype.logErrors = function(result) {
        if (result) {
            return console.log(result);
        }
    };

    Toy.prototype.setTexture = function(slot, url) {
        var res;
        res = this.mEffect.newTexture(this.mActiveDoc, slot, url);
        if (!res.mFailed) {
            return this.mPass[this.mActiveDoc].mDirty = res.mNeedsShaderCompile;
        }
    };

    Toy.prototype.getTexture = function(slot) {
        return this.mEffect.getTexture(this.mActiveDoc, slot);
    };

    Toy.prototype.setShaderFromEditor = function(forceall) {
        var anyErrors, i, j, k, l, m, num, recompileAll, ref1, ref2, result, shaderCode;
        anyErrors = false;
        num = this.mEffect.getNumPasses();
        recompileAll = false;
        for (i = k = 0, ref1 = num; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            if (this.mEffect.getPassType(i) === 'common' && (this.mPass[i].mDirty || forceall)) {
                recompileAll = true;
                break;
            }
        }
        for (j = l = 0; l < 4; j = ++l) {
            for (i = m = 0, ref2 = num; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
                if (j === 0 && this.mEffect.getPassType(i) !== 'common') {
                    continue;
                }
                if (j === 1 && this.mEffect.getPassType(i) !== 'buffer') {
                    continue;
                }
                if (j === 2 && this.mEffect.getPassType(i) !== 'cubemap') {
                    continue;
                }
                if (j === 3 && this.mEffect.getPassType(i) !== 'image') {
                    continue;
                }
                if (recompileAll || this.mPass[i].mDirty || forceall) {
                    shaderCode = this.mPass[i].mCode;
                    result = this.mEffect.newShader(shaderCode, i);
                    if (result) {
                        anyErrors = true;
                    }
                    this.mPass[i].mError = result;
                    this.mPass[i].mDirty = false;
                }
            }
        }
        this.logErrors(this.mPass[this.mActiveDoc].mError);
        if (!anyErrors) {
            if (!this.mIsRendering) {
                gToy.startRendering();
            }
            return this.mForceFrame = true;
        }
    };

    Toy.prototype.loadNew = function() {
        return this.loadPasses([
            {
                inputs: [],
                type: 'image',
                code: "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.1 + 0.1*cos(0.1*iTime+uv.xyx+vec3(0,2,4));\n    fragColor = vec4(col,1.0);\n}"
            }
        ]);
    };

    Toy.prototype.loadPasses = function(passes) {
        var i, k, ref1, res;
        res = this.mEffect.newScriptJSON(passes);
        this.mPass = [];
        for (i = k = 0, ref1 = res.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            this.mPass[i] = {
                mCode: res[i].mShader,
                mFailed: res[i].mFailed,
                mError: res[i].mError,
                mDirty: false
            };
        }
        this.logErrors(this.mPass[0].mError);
        return this.startRendering();
    };

    Toy.prototype.load = function(dir) {
        var file, imageFile, k, len, ref1, shader, shaderDir;
        shaderDir = slash.resolve(__dirname + "/../shader/" + dir);
        imageFile = shaderDir + "/image.frag";
        if (!slash.fileExists(imageFile)) {
            console.error("missing " + imageFile);
            return;
        }
        shader = {
            image: imageFile
        };
        ref1 = ['common', 'buffer'];
        for (k = 0, len = ref1.length; k < len; k++) {
            file = ref1[k];
            if (slash.fileExists(shaderDir + "/" + file + ".frag")) {
                shader[file] = shaderDir + "/" + file + ".frag";
            }
        }
        return this.loadShader(shader);
    };

    Toy.prototype.loadShader = function(arg) {
        var buffer, common, font, image, imageCode, keyboard, passes, ref1, ref2, ref3, ref4, ref5;
        image = (ref1 = arg.image) != null ? ref1 : null, common = (ref2 = arg.common) != null ? ref2 : null, buffer = (ref3 = arg.buffer) != null ? ref3 : null, keyboard = (ref4 = arg.keyboard) != null ? ref4 : true, font = (ref5 = arg.font) != null ? ref5 : true;
        passes = [];
        imageCode = slash.readText(image);
        if (empty(imageCode)) {
            return console.error("no image code in " + image + "?");
        }
        passes.push({
            type: 'image',
            code: imageCode,
            inputs: []
        });
        if (common) {
            passes.push({
                type: 'common',
                code: slash.readText(common)
            });
        }
        if (keyboard) {
            passes[0].inputs.push({
                channel: 0,
                id: 0,
                type: 'keyboard'
            });
            passes.push({
                type: 'image',
                url: {
                    mType: 'keyboard'
                }
            });
        }
        if (buffer) {
            passes[0].inputs.push({
                channel: 1,
                id: 'bufferA',
                type: 'buffer'
            });
            passes.push({
                type: 'buffer',
                output: 'bufferA',
                inputs: [
                    {
                        channel: 1,
                        id: 'bufferA',
                        type: 'buffer'
                    }
                ],
                code: slash.readText(buffer)
            });
            if (keyboard) {
                passes.slice(-1)[0].inputs.push({
                    channel: 0,
                    id: 0,
                    type: 'keyboard'
                });
            }
        }
        if (font) {
            passes[0].inputs.push({
                channel: 2,
                id: 2,
                type: 'texture',
                src: slash.fileUrl("../img/font.png")
            });
            passes.push({
                type: 'image',
                url: {
                    type: 'texture',
                    src: slash.fileUrl("../img/font.png")
                }
            });
        }
        return this.loadPasses(passes);
    };

    module.exports = Toy;

    return Toy;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/toy.coffee